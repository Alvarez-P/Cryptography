(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{369:function(e,t,a){"use strict";a.r(t);var o=a(25),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"diffie-hellman-key-exchange-protocol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diffie-hellman-key-exchange-protocol"}},[e._v("#")]),e._v(" Diffie-Hellman Key Exchange Protocol")]),e._v(" "),a("p",[e._v("Diffie-Hellman key exchange (DH) was the first public-key algorithm ever invented (1976). It gets its security from the difficulty of calculating discrete logarithms in a finite field, as compared with the ease of calculating exponentiation in the same field.")]),e._v(" "),a("p",[e._v('Diffie-Hellman can be used for key distribution. Alice and Bob can use this algorithm to generate a secret key, but it cannot be used to encrypt and decrypt messages. So it is known as the "Diffie–Hellman Key Exchange Protocol."')]),e._v(" "),a("p",[e._v("The goal is for Alice and Bob have a mutual secret key without using a secure channel or a secure meeting (note that they can't see each other face to face).")]),e._v(" "),a("p",[e._v("First, Alice and Bob agree on a large primes, n and g, such that g is primitive mod n (in modular arithmetic, a number g is a primitive root modulo n if every number a coprime to n is congruent to a power of g modulo n). These two integers don’t have to be secret; Alice and Bob can agree to them over some insecure channel. They can even be common among a group of users. It doesn’t matter. Then, the protocol goes as follows:")]),e._v(" "),a("ol",[a("li",[e._v("Alice chooses a random large integer x and sends to Bob X that is calculated as follows:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("X = g^x(mod n)\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Bob chooses a random large integer y and sends to Alice Y that is calculated as follows:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Y = g^y(mod n)\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Alice computes k as follows:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("k = Y*x(mod n)\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("Bob computes k´ as follows:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("k´ = X*y(mod n)\n")])])]),a("p",[e._v("Both k and k´ are equal to g^(x*y) mod n. No one who is listening on the channel can compute that value; they only know n, g, X, and Y. Unless they can compute the discrete logarithm and recover x or y, they cannot solve the problem. So, k is the secret key that both Alice and Bob computed independently and we’ve reached the goal.")]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),a("p",[e._v("The choice of g and n can have a substantial impact on the security of this system. It is based on the difficulty of factoring numbers the same size as n.")])])])}),[],!1,null,null,null);t.default=s.exports}}]);